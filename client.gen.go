// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "apiKeyAuth.Scopes"
)

// Defines values for PatchActiveParamsOperation.
const (
	PatchActiveParamsOperationAppend  PatchActiveParamsOperation = "append"
	PatchActiveParamsOperationPrepend PatchActiveParamsOperation = "prepend"
	PatchActiveParamsOperationReplace PatchActiveParamsOperation = "replace"
)

// Defines values for PatchActiveParamsTargetType.
const (
	PatchActiveParamsTargetTypeBlock       PatchActiveParamsTargetType = "block"
	PatchActiveParamsTargetTypeFrontmatter PatchActiveParamsTargetType = "frontmatter"
	PatchActiveParamsTargetTypeHeading     PatchActiveParamsTargetType = "heading"
)

// Defines values for PatchActiveParamsTrimTargetWhitespace.
const (
	PatchActiveParamsTrimTargetWhitespaceFalse PatchActiveParamsTrimTargetWhitespace = "false"
	PatchActiveParamsTrimTargetWhitespaceTrue  PatchActiveParamsTrimTargetWhitespace = "true"
)

// Defines values for DeletePeriodicPeriodParamsPeriod.
const (
	DeletePeriodicPeriodParamsPeriodDaily     DeletePeriodicPeriodParamsPeriod = "daily"
	DeletePeriodicPeriodParamsPeriodMonthly   DeletePeriodicPeriodParamsPeriod = "monthly"
	DeletePeriodicPeriodParamsPeriodQuarterly DeletePeriodicPeriodParamsPeriod = "quarterly"
	DeletePeriodicPeriodParamsPeriodWeekly    DeletePeriodicPeriodParamsPeriod = "weekly"
	DeletePeriodicPeriodParamsPeriodYearly    DeletePeriodicPeriodParamsPeriod = "yearly"
)

// Defines values for GetPeriodicPeriodParamsPeriod.
const (
	GetPeriodicPeriodParamsPeriodDaily     GetPeriodicPeriodParamsPeriod = "daily"
	GetPeriodicPeriodParamsPeriodMonthly   GetPeriodicPeriodParamsPeriod = "monthly"
	GetPeriodicPeriodParamsPeriodQuarterly GetPeriodicPeriodParamsPeriod = "quarterly"
	GetPeriodicPeriodParamsPeriodWeekly    GetPeriodicPeriodParamsPeriod = "weekly"
	GetPeriodicPeriodParamsPeriodYearly    GetPeriodicPeriodParamsPeriod = "yearly"
)

// Defines values for PatchPeriodicPeriodParamsOperation.
const (
	PatchPeriodicPeriodParamsOperationAppend  PatchPeriodicPeriodParamsOperation = "append"
	PatchPeriodicPeriodParamsOperationPrepend PatchPeriodicPeriodParamsOperation = "prepend"
	PatchPeriodicPeriodParamsOperationReplace PatchPeriodicPeriodParamsOperation = "replace"
)

// Defines values for PatchPeriodicPeriodParamsTargetType.
const (
	PatchPeriodicPeriodParamsTargetTypeBlock       PatchPeriodicPeriodParamsTargetType = "block"
	PatchPeriodicPeriodParamsTargetTypeFrontmatter PatchPeriodicPeriodParamsTargetType = "frontmatter"
	PatchPeriodicPeriodParamsTargetTypeHeading     PatchPeriodicPeriodParamsTargetType = "heading"
)

// Defines values for PatchPeriodicPeriodParamsTrimTargetWhitespace.
const (
	PatchPeriodicPeriodParamsTrimTargetWhitespaceFalse PatchPeriodicPeriodParamsTrimTargetWhitespace = "false"
	PatchPeriodicPeriodParamsTrimTargetWhitespaceTrue  PatchPeriodicPeriodParamsTrimTargetWhitespace = "true"
)

// Defines values for PatchPeriodicPeriodParamsPeriod.
const (
	PatchPeriodicPeriodParamsPeriodDaily     PatchPeriodicPeriodParamsPeriod = "daily"
	PatchPeriodicPeriodParamsPeriodMonthly   PatchPeriodicPeriodParamsPeriod = "monthly"
	PatchPeriodicPeriodParamsPeriodQuarterly PatchPeriodicPeriodParamsPeriod = "quarterly"
	PatchPeriodicPeriodParamsPeriodWeekly    PatchPeriodicPeriodParamsPeriod = "weekly"
	PatchPeriodicPeriodParamsPeriodYearly    PatchPeriodicPeriodParamsPeriod = "yearly"
)

// Defines values for PostPeriodicPeriodParamsPeriod.
const (
	PostPeriodicPeriodParamsPeriodDaily     PostPeriodicPeriodParamsPeriod = "daily"
	PostPeriodicPeriodParamsPeriodMonthly   PostPeriodicPeriodParamsPeriod = "monthly"
	PostPeriodicPeriodParamsPeriodQuarterly PostPeriodicPeriodParamsPeriod = "quarterly"
	PostPeriodicPeriodParamsPeriodWeekly    PostPeriodicPeriodParamsPeriod = "weekly"
	PostPeriodicPeriodParamsPeriodYearly    PostPeriodicPeriodParamsPeriod = "yearly"
)

// Defines values for PutPeriodicPeriodParamsPeriod.
const (
	Daily     PutPeriodicPeriodParamsPeriod = "daily"
	Monthly   PutPeriodicPeriodParamsPeriod = "monthly"
	Quarterly PutPeriodicPeriodParamsPeriod = "quarterly"
	Weekly    PutPeriodicPeriodParamsPeriod = "weekly"
	Yearly    PutPeriodicPeriodParamsPeriod = "yearly"
)

// Defines values for PatchVaultFilenameParamsOperation.
const (
	Append  PatchVaultFilenameParamsOperation = "append"
	Prepend PatchVaultFilenameParamsOperation = "prepend"
	Replace PatchVaultFilenameParamsOperation = "replace"
)

// Defines values for PatchVaultFilenameParamsTargetType.
const (
	Block       PatchVaultFilenameParamsTargetType = "block"
	Frontmatter PatchVaultFilenameParamsTargetType = "frontmatter"
	Heading     PatchVaultFilenameParamsTargetType = "heading"
)

// Defines values for PatchVaultFilenameParamsTrimTargetWhitespace.
const (
	False PatchVaultFilenameParamsTrimTargetWhitespace = "false"
	True  PatchVaultFilenameParamsTrimTargetWhitespace = "true"
)

// Error defines model for Error.
type Error struct {
	// ErrorCode A 5-digit error code uniquely identifying this particular type of error.
	ErrorCode *float32 `json:"errorCode,omitempty"`

	// Message Message describing the error.
	Message *string `json:"message,omitempty"`
}

// NoteJson defines model for NoteJson.
type NoteJson struct {
	Content     string                 `json:"content"`
	Frontmatter map[string]interface{} `json:"frontmatter"`
	Path        string                 `json:"path"`
	Stat        struct {
		Ctime float32 `json:"ctime"`
		Mtime float32 `json:"mtime"`
		Size  float32 `json:"size"`
	} `json:"stat"`
	Tags []string `json:"tags"`
}

// PatchActiveJSONBody defines parameters for PatchActive.
type PatchActiveJSONBody = string

// PatchActiveParams defines parameters for PatchActive.
type PatchActiveParams struct {
	// Operation Patch operation to perform
	Operation PatchActiveParamsOperation `json:"Operation"`

	// TargetType Type of target to patch
	TargetType PatchActiveParamsTargetType `json:"Target-Type"`

	// TargetDelimiter Delimiter to use for nested targets (i.e. Headings)
	TargetDelimiter *string `json:"Target-Delimiter,omitempty"`

	// Target Target to patch; this value can be URL-Encoded and *must*
	// be URL-Encoded if it includes non-ASCII characters.
	Target string `json:"Target"`

	// TrimTargetWhitespace Trim whitespace from Target before applying patch?
	TrimTargetWhitespace *PatchActiveParamsTrimTargetWhitespace `json:"Trim-Target-Whitespace,omitempty"`
}

// PatchActiveParamsOperation defines parameters for PatchActive.
type PatchActiveParamsOperation string

// PatchActiveParamsTargetType defines parameters for PatchActive.
type PatchActiveParamsTargetType string

// PatchActiveParamsTrimTargetWhitespace defines parameters for PatchActive.
type PatchActiveParamsTrimTargetWhitespace string

// PostOpenFilenameParams defines parameters for PostOpenFilename.
type PostOpenFilenameParams struct {
	// NewLeaf Open this as a new leaf?
	NewLeaf *bool `form:"newLeaf,omitempty" json:"newLeaf,omitempty"`
}

// DeletePeriodicPeriodParamsPeriod defines parameters for DeletePeriodicPeriod.
type DeletePeriodicPeriodParamsPeriod string

// GetPeriodicPeriodParamsPeriod defines parameters for GetPeriodicPeriod.
type GetPeriodicPeriodParamsPeriod string

// PatchPeriodicPeriodJSONBody defines parameters for PatchPeriodicPeriod.
type PatchPeriodicPeriodJSONBody = string

// PatchPeriodicPeriodParams defines parameters for PatchPeriodicPeriod.
type PatchPeriodicPeriodParams struct {
	// Operation Patch operation to perform
	Operation PatchPeriodicPeriodParamsOperation `json:"Operation"`

	// TargetType Type of target to patch
	TargetType PatchPeriodicPeriodParamsTargetType `json:"Target-Type"`

	// TargetDelimiter Delimiter to use for nested targets (i.e. Headings)
	TargetDelimiter *string `json:"Target-Delimiter,omitempty"`

	// Target Target to patch; this value can be URL-Encoded and *must*
	// be URL-Encoded if it includes non-ASCII characters.
	Target string `json:"Target"`

	// TrimTargetWhitespace Trim whitespace from Target before applying patch?
	TrimTargetWhitespace *PatchPeriodicPeriodParamsTrimTargetWhitespace `json:"Trim-Target-Whitespace,omitempty"`
}

// PatchPeriodicPeriodParamsOperation defines parameters for PatchPeriodicPeriod.
type PatchPeriodicPeriodParamsOperation string

// PatchPeriodicPeriodParamsTargetType defines parameters for PatchPeriodicPeriod.
type PatchPeriodicPeriodParamsTargetType string

// PatchPeriodicPeriodParamsTrimTargetWhitespace defines parameters for PatchPeriodicPeriod.
type PatchPeriodicPeriodParamsTrimTargetWhitespace string

// PatchPeriodicPeriodParamsPeriod defines parameters for PatchPeriodicPeriod.
type PatchPeriodicPeriodParamsPeriod string

// PostPeriodicPeriodParamsPeriod defines parameters for PostPeriodicPeriod.
type PostPeriodicPeriodParamsPeriod string

// PutPeriodicPeriodParamsPeriod defines parameters for PutPeriodicPeriod.
type PutPeriodicPeriodParamsPeriod string

// PostSearchApplicationVndOlrapiJSONlogicPlusJSONBody defines parameters for PostSearch.
type PostSearchApplicationVndOlrapiJSONlogicPlusJSONBody = map[string]interface{}

// PostSearchSimpleParams defines parameters for PostSearchSimple.
type PostSearchSimpleParams struct {
	// Query Your search query
	Query string `form:"query" json:"query"`

	// ContextLength How much context to return around the matching string
	ContextLength *float32 `form:"contextLength,omitempty" json:"contextLength,omitempty"`
}

// PatchVaultFilenameJSONBody defines parameters for PatchVaultFilename.
type PatchVaultFilenameJSONBody = string

// PatchVaultFilenameParams defines parameters for PatchVaultFilename.
type PatchVaultFilenameParams struct {
	// Operation Patch operation to perform
	Operation PatchVaultFilenameParamsOperation `json:"Operation"`

	// TargetType Type of target to patch
	TargetType PatchVaultFilenameParamsTargetType `json:"Target-Type"`

	// TargetDelimiter Delimiter to use for nested targets (i.e. Headings)
	TargetDelimiter *string `json:"Target-Delimiter,omitempty"`

	// Target Target to patch; this value can be URL-Encoded and *must*
	// be URL-Encoded if it includes non-ASCII characters.
	Target string `json:"Target"`

	// TrimTargetWhitespace Trim whitespace from Target before applying patch?
	TrimTargetWhitespace *PatchVaultFilenameParamsTrimTargetWhitespace `json:"Trim-Target-Whitespace,omitempty"`
}

// PatchVaultFilenameParamsOperation defines parameters for PatchVaultFilename.
type PatchVaultFilenameParamsOperation string

// PatchVaultFilenameParamsTargetType defines parameters for PatchVaultFilename.
type PatchVaultFilenameParamsTargetType string

// PatchVaultFilenameParamsTrimTargetWhitespace defines parameters for PatchVaultFilename.
type PatchVaultFilenameParamsTrimTargetWhitespace string

// PatchActiveJSONRequestBody defines body for PatchActive for application/json ContentType.
type PatchActiveJSONRequestBody = PatchActiveJSONBody

// PatchPeriodicPeriodJSONRequestBody defines body for PatchPeriodicPeriod for application/json ContentType.
type PatchPeriodicPeriodJSONRequestBody = PatchPeriodicPeriodJSONBody

// PostSearchApplicationVndOlrapiJSONlogicPlusJSONRequestBody defines body for PostSearch for application/vnd.olrapi.jsonlogic+json ContentType.
type PostSearchApplicationVndOlrapiJSONlogicPlusJSONRequestBody = PostSearchApplicationVndOlrapiJSONlogicPlusJSONBody

// PatchVaultFilenameJSONRequestBody defines body for PatchVaultFilename for application/json ContentType.
type PatchVaultFilenameJSONRequestBody = PatchVaultFilenameJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteActive request
	DeleteActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActive request
	GetActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchActiveWithBody request with any body
	PatchActiveWithBody(ctx context.Context, params *PatchActiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchActive(ctx context.Context, params *PatchActiveParams, body PatchActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostActiveWithBody request with any body
	PostActiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutActiveWithBody request with any body
	PutActiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommands request
	GetCommands(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCommandsCommandId request
	PostCommandsCommandId(ctx context.Context, commandId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOpenFilename request
	PostOpenFilename(ctx context.Context, filename string, params *PostOpenFilenameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePeriodicPeriod request
	DeletePeriodicPeriod(ctx context.Context, period DeletePeriodicPeriodParamsPeriod, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPeriodicPeriod request
	GetPeriodicPeriod(ctx context.Context, period GetPeriodicPeriodParamsPeriod, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPeriodicPeriodWithBody request with any body
	PatchPeriodicPeriodWithBody(ctx context.Context, period PatchPeriodicPeriodParamsPeriod, params *PatchPeriodicPeriodParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPeriodicPeriod(ctx context.Context, period PatchPeriodicPeriodParamsPeriod, params *PatchPeriodicPeriodParams, body PatchPeriodicPeriodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPeriodicPeriodWithBody request with any body
	PostPeriodicPeriodWithBody(ctx context.Context, period PostPeriodicPeriodParamsPeriod, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPeriodicPeriodWithBody request with any body
	PutPeriodicPeriodWithBody(ctx context.Context, period PutPeriodicPeriodParamsPeriod, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSearchWithBody request with any body
	PostSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSearchWithApplicationVndOlrapiJSONlogicPlusJSONBody(ctx context.Context, body PostSearchApplicationVndOlrapiJSONlogicPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSearchSimple request
	PostSearchSimple(ctx context.Context, params *PostSearchSimpleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVault request
	GetVault(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVaultFilename request
	DeleteVaultFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVaultFilename request
	GetVaultFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchVaultFilenameWithBody request with any body
	PatchVaultFilenameWithBody(ctx context.Context, filename string, params *PatchVaultFilenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchVaultFilename(ctx context.Context, filename string, params *PatchVaultFilenameParams, body PatchVaultFilenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVaultFilenameWithBody request with any body
	PostVaultFilenameWithBody(ctx context.Context, filename string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVaultFilenameWithBody request with any body
	PutVaultFilenameWithBody(ctx context.Context, filename string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVaultPathToDirectory request
	GetVaultPathToDirectory(ctx context.Context, pathToDirectory string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteActiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchActiveWithBody(ctx context.Context, params *PatchActiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchActiveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchActive(ctx context.Context, params *PatchActiveParams, body PatchActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchActiveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostActiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostActiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutActiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutActiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommands(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommandsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommandsCommandId(ctx context.Context, commandId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommandsCommandIdRequest(c.Server, commandId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOpenFilename(ctx context.Context, filename string, params *PostOpenFilenameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOpenFilenameRequest(c.Server, filename, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePeriodicPeriod(ctx context.Context, period DeletePeriodicPeriodParamsPeriod, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePeriodicPeriodRequest(c.Server, period)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeriodicPeriod(ctx context.Context, period GetPeriodicPeriodParamsPeriod, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPeriodicPeriodRequest(c.Server, period)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPeriodicPeriodWithBody(ctx context.Context, period PatchPeriodicPeriodParamsPeriod, params *PatchPeriodicPeriodParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPeriodicPeriodRequestWithBody(c.Server, period, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPeriodicPeriod(ctx context.Context, period PatchPeriodicPeriodParamsPeriod, params *PatchPeriodicPeriodParams, body PatchPeriodicPeriodJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPeriodicPeriodRequest(c.Server, period, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPeriodicPeriodWithBody(ctx context.Context, period PostPeriodicPeriodParamsPeriod, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPeriodicPeriodRequestWithBody(c.Server, period, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPeriodicPeriodWithBody(ctx context.Context, period PutPeriodicPeriodParamsPeriod, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPeriodicPeriodRequestWithBody(c.Server, period, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchWithApplicationVndOlrapiJSONlogicPlusJSONBody(ctx context.Context, body PostSearchApplicationVndOlrapiJSONlogicPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchRequestWithApplicationVndOlrapiJSONlogicPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchSimple(ctx context.Context, params *PostSearchSimpleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchSimpleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVault(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVaultRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVaultFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVaultFilenameRequest(c.Server, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVaultFilename(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVaultFilenameRequest(c.Server, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVaultFilenameWithBody(ctx context.Context, filename string, params *PatchVaultFilenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchVaultFilenameRequestWithBody(c.Server, filename, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchVaultFilename(ctx context.Context, filename string, params *PatchVaultFilenameParams, body PatchVaultFilenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchVaultFilenameRequest(c.Server, filename, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVaultFilenameWithBody(ctx context.Context, filename string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVaultFilenameRequestWithBody(c.Server, filename, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVaultFilenameWithBody(ctx context.Context, filename string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVaultFilenameRequestWithBody(c.Server, filename, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVaultPathToDirectory(ctx context.Context, pathToDirectory string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVaultPathToDirectoryRequest(c.Server, pathToDirectory)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteActiveRequest generates requests for DeleteActive
func NewDeleteActiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/active/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActiveRequest generates requests for GetActive
func NewGetActiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/active/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchActiveRequest calls the generic PatchActive builder with application/json body
func NewPatchActiveRequest(server string, params *PatchActiveParams, body PatchActiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchActiveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPatchActiveRequestWithBody generates requests for PatchActive with any type of body
func NewPatchActiveRequestWithBody(server string, params *PatchActiveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/active/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Operation", runtime.ParamLocationHeader, params.Operation)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Operation", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Target-Type", runtime.ParamLocationHeader, params.TargetType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Target-Type", headerParam1)

		if params.TargetDelimiter != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Target-Delimiter", runtime.ParamLocationHeader, *params.TargetDelimiter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Target-Delimiter", headerParam2)
		}

		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Target", runtime.ParamLocationHeader, params.Target)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Target", headerParam3)

		if params.TrimTargetWhitespace != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "Trim-Target-Whitespace", runtime.ParamLocationHeader, *params.TrimTargetWhitespace)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Trim-Target-Whitespace", headerParam4)
		}

	}

	return req, nil
}

// NewPostActiveRequestWithBody generates requests for PostActive with any type of body
func NewPostActiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/active/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutActiveRequestWithBody generates requests for PutActive with any type of body
func NewPutActiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/active/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCommandsRequest generates requests for GetCommands
func NewGetCommandsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commands/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCommandsCommandIdRequest generates requests for PostCommandsCommandId
func NewPostCommandsCommandIdRequest(server string, commandId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commandId", runtime.ParamLocationPath, commandId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commands/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOpenFilenameRequest generates requests for PostOpenFilename
func NewPostOpenFilenameRequest(server string, filename string, params *PostOpenFilenameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/open/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NewLeaf != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "newLeaf", runtime.ParamLocationQuery, *params.NewLeaf); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePeriodicPeriodRequest generates requests for DeletePeriodicPeriod
func NewDeletePeriodicPeriodRequest(server string, period DeletePeriodicPeriodParamsPeriod) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "period", runtime.ParamLocationPath, period)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/periodic/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPeriodicPeriodRequest generates requests for GetPeriodicPeriod
func NewGetPeriodicPeriodRequest(server string, period GetPeriodicPeriodParamsPeriod) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "period", runtime.ParamLocationPath, period)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/periodic/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPeriodicPeriodRequest calls the generic PatchPeriodicPeriod builder with application/json body
func NewPatchPeriodicPeriodRequest(server string, period PatchPeriodicPeriodParamsPeriod, params *PatchPeriodicPeriodParams, body PatchPeriodicPeriodJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPeriodicPeriodRequestWithBody(server, period, params, "application/json", bodyReader)
}

// NewPatchPeriodicPeriodRequestWithBody generates requests for PatchPeriodicPeriod with any type of body
func NewPatchPeriodicPeriodRequestWithBody(server string, period PatchPeriodicPeriodParamsPeriod, params *PatchPeriodicPeriodParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "period", runtime.ParamLocationPath, period)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/periodic/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Operation", runtime.ParamLocationHeader, params.Operation)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Operation", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Target-Type", runtime.ParamLocationHeader, params.TargetType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Target-Type", headerParam1)

		if params.TargetDelimiter != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Target-Delimiter", runtime.ParamLocationHeader, *params.TargetDelimiter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Target-Delimiter", headerParam2)
		}

		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Target", runtime.ParamLocationHeader, params.Target)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Target", headerParam3)

		if params.TrimTargetWhitespace != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "Trim-Target-Whitespace", runtime.ParamLocationHeader, *params.TrimTargetWhitespace)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Trim-Target-Whitespace", headerParam4)
		}

	}

	return req, nil
}

// NewPostPeriodicPeriodRequestWithBody generates requests for PostPeriodicPeriod with any type of body
func NewPostPeriodicPeriodRequestWithBody(server string, period PostPeriodicPeriodParamsPeriod, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "period", runtime.ParamLocationPath, period)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/periodic/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPeriodicPeriodRequestWithBody generates requests for PutPeriodicPeriod with any type of body
func NewPutPeriodicPeriodRequestWithBody(server string, period PutPeriodicPeriodParamsPeriod, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "period", runtime.ParamLocationPath, period)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/periodic/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSearchRequestWithApplicationVndOlrapiJSONlogicPlusJSONBody calls the generic PostSearch builder with application/vnd.olrapi.jsonlogic+json body
func NewPostSearchRequestWithApplicationVndOlrapiJSONlogicPlusJSONBody(server string, body PostSearchApplicationVndOlrapiJSONlogicPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSearchRequestWithBody(server, "application/vnd.olrapi.jsonlogic+json", bodyReader)
}

// NewPostSearchRequestWithBody generates requests for PostSearch with any type of body
func NewPostSearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSearchSimpleRequest generates requests for PostSearchSimple
func NewPostSearchSimpleRequest(server string, params *PostSearchSimpleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/simple/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ContextLength != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contextLength", runtime.ParamLocationQuery, *params.ContextLength); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVaultRequest generates requests for GetVault
func NewGetVaultRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vault/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteVaultFilenameRequest generates requests for DeleteVaultFilename
func NewDeleteVaultFilenameRequest(server string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vault/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVaultFilenameRequest generates requests for GetVaultFilename
func NewGetVaultFilenameRequest(server string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vault/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchVaultFilenameRequest calls the generic PatchVaultFilename builder with application/json body
func NewPatchVaultFilenameRequest(server string, filename string, params *PatchVaultFilenameParams, body PatchVaultFilenameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchVaultFilenameRequestWithBody(server, filename, params, "application/json", bodyReader)
}

// NewPatchVaultFilenameRequestWithBody generates requests for PatchVaultFilename with any type of body
func NewPatchVaultFilenameRequestWithBody(server string, filename string, params *PatchVaultFilenameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vault/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Operation", runtime.ParamLocationHeader, params.Operation)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Operation", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Target-Type", runtime.ParamLocationHeader, params.TargetType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Target-Type", headerParam1)

		if params.TargetDelimiter != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Target-Delimiter", runtime.ParamLocationHeader, *params.TargetDelimiter)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Target-Delimiter", headerParam2)
		}

		var headerParam3 string

		headerParam3, err = runtime.StyleParamWithLocation("simple", false, "Target", runtime.ParamLocationHeader, params.Target)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Target", headerParam3)

		if params.TrimTargetWhitespace != nil {
			var headerParam4 string

			headerParam4, err = runtime.StyleParamWithLocation("simple", false, "Trim-Target-Whitespace", runtime.ParamLocationHeader, *params.TrimTargetWhitespace)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Trim-Target-Whitespace", headerParam4)
		}

	}

	return req, nil
}

// NewPostVaultFilenameRequestWithBody generates requests for PostVaultFilename with any type of body
func NewPostVaultFilenameRequestWithBody(server string, filename string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vault/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutVaultFilenameRequestWithBody generates requests for PutVaultFilename with any type of body
func NewPutVaultFilenameRequestWithBody(server string, filename string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vault/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetVaultPathToDirectoryRequest generates requests for GetVaultPathToDirectory
func NewGetVaultPathToDirectoryRequest(server string, pathToDirectory string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pathToDirectory", runtime.ParamLocationPath, pathToDirectory)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vault/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWithResponse request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// DeleteActiveWithResponse request
	DeleteActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteActiveResponse, error)

	// GetActiveWithResponse request
	GetActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActiveResponse, error)

	// PatchActiveWithBodyWithResponse request with any body
	PatchActiveWithBodyWithResponse(ctx context.Context, params *PatchActiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchActiveResponse, error)

	PatchActiveWithResponse(ctx context.Context, params *PatchActiveParams, body PatchActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchActiveResponse, error)

	// PostActiveWithBodyWithResponse request with any body
	PostActiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActiveResponse, error)

	// PutActiveWithBodyWithResponse request with any body
	PutActiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutActiveResponse, error)

	// GetCommandsWithResponse request
	GetCommandsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCommandsResponse, error)

	// PostCommandsCommandIdWithResponse request
	PostCommandsCommandIdWithResponse(ctx context.Context, commandId string, reqEditors ...RequestEditorFn) (*PostCommandsCommandIdResponse, error)

	// PostOpenFilenameWithResponse request
	PostOpenFilenameWithResponse(ctx context.Context, filename string, params *PostOpenFilenameParams, reqEditors ...RequestEditorFn) (*PostOpenFilenameResponse, error)

	// DeletePeriodicPeriodWithResponse request
	DeletePeriodicPeriodWithResponse(ctx context.Context, period DeletePeriodicPeriodParamsPeriod, reqEditors ...RequestEditorFn) (*DeletePeriodicPeriodResponse, error)

	// GetPeriodicPeriodWithResponse request
	GetPeriodicPeriodWithResponse(ctx context.Context, period GetPeriodicPeriodParamsPeriod, reqEditors ...RequestEditorFn) (*GetPeriodicPeriodResponse, error)

	// PatchPeriodicPeriodWithBodyWithResponse request with any body
	PatchPeriodicPeriodWithBodyWithResponse(ctx context.Context, period PatchPeriodicPeriodParamsPeriod, params *PatchPeriodicPeriodParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPeriodicPeriodResponse, error)

	PatchPeriodicPeriodWithResponse(ctx context.Context, period PatchPeriodicPeriodParamsPeriod, params *PatchPeriodicPeriodParams, body PatchPeriodicPeriodJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPeriodicPeriodResponse, error)

	// PostPeriodicPeriodWithBodyWithResponse request with any body
	PostPeriodicPeriodWithBodyWithResponse(ctx context.Context, period PostPeriodicPeriodParamsPeriod, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPeriodicPeriodResponse, error)

	// PutPeriodicPeriodWithBodyWithResponse request with any body
	PutPeriodicPeriodWithBodyWithResponse(ctx context.Context, period PutPeriodicPeriodParamsPeriod, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPeriodicPeriodResponse, error)

	// PostSearchWithBodyWithResponse request with any body
	PostSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchResponse, error)

	PostSearchWithApplicationVndOlrapiJSONlogicPlusJSONBodyWithResponse(ctx context.Context, body PostSearchApplicationVndOlrapiJSONlogicPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchResponse, error)

	// PostSearchSimpleWithResponse request
	PostSearchSimpleWithResponse(ctx context.Context, params *PostSearchSimpleParams, reqEditors ...RequestEditorFn) (*PostSearchSimpleResponse, error)

	// GetVaultWithResponse request
	GetVaultWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVaultResponse, error)

	// DeleteVaultFilenameWithResponse request
	DeleteVaultFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*DeleteVaultFilenameResponse, error)

	// GetVaultFilenameWithResponse request
	GetVaultFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetVaultFilenameResponse, error)

	// PatchVaultFilenameWithBodyWithResponse request with any body
	PatchVaultFilenameWithBodyWithResponse(ctx context.Context, filename string, params *PatchVaultFilenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchVaultFilenameResponse, error)

	PatchVaultFilenameWithResponse(ctx context.Context, filename string, params *PatchVaultFilenameParams, body PatchVaultFilenameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchVaultFilenameResponse, error)

	// PostVaultFilenameWithBodyWithResponse request with any body
	PostVaultFilenameWithBodyWithResponse(ctx context.Context, filename string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVaultFilenameResponse, error)

	// PutVaultFilenameWithBodyWithResponse request with any body
	PutVaultFilenameWithBodyWithResponse(ctx context.Context, filename string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVaultFilenameResponse, error)

	// GetVaultPathToDirectoryWithResponse request
	GetVaultPathToDirectoryWithResponse(ctx context.Context, pathToDirectory string, reqEditors ...RequestEditorFn) (*GetVaultPathToDirectoryResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Authenticated Is your current request authenticated?
		Authenticated *bool `json:"authenticated,omitempty"`

		// Ok 'OK'
		Ok *string `json:"ok,omitempty"`

		// Service 'Obsidian Local REST API'
		Service  *string `json:"service,omitempty"`
		Versions *struct {
			// Obsidian Obsidian plugin API version
			Obsidian *string `json:"obsidian,omitempty"`

			// Self Plugin version.
			Self *string `json:"self,omitempty"`
		} `json:"versions,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActiveResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndOlrapiNoteJSON200 *NoteJson
}

// Status returns HTTPResponse.Status
func (r GetActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r PatchActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r PostActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r PutActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommandsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Commands *[]struct {
			Id   *string `json:"id,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"commands,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCommandsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommandsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCommandsCommandIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostCommandsCommandIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCommandsCommandIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOpenFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOpenFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOpenFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePeriodicPeriodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePeriodicPeriodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePeriodicPeriodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeriodicPeriodResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndOlrapiNoteJSON200 *NoteJson
}

// Status returns HTTPResponse.Status
func (r GetPeriodicPeriodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeriodicPeriodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPeriodicPeriodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r PatchPeriodicPeriodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPeriodicPeriodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPeriodicPeriodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r PostPeriodicPeriodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPeriodicPeriodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPeriodicPeriodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r PutPeriodicPeriodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPeriodicPeriodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Filename Path to the matching file
		Filename string                `json:"filename"`
		Result   PostSearch_200_Result `json:"result"`
	}
	JSON400 *Error
}
type PostSearch200Result0 = string
type PostSearch200Result1 = float32
type PostSearch200Result2 = []interface{}
type PostSearch200Result3 = map[string]interface{}
type PostSearch200Result4 = bool
type PostSearch_200_Result struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r PostSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSearchSimpleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Filename Path to the matching file
		Filename *string `json:"filename,omitempty"`
		Matches  *[]struct {
			Context string `json:"context"`
			Match   struct {
				End   float32 `json:"end"`
				Start float32 `json:"start"`
			} `json:"match"`
		} `json:"matches,omitempty"`
		Score *float32 `json:"score,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostSearchSimpleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSearchSimpleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Files *[]string `json:"files,omitempty"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetVaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVaultFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteVaultFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVaultFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVaultFilenameResponse struct {
	Body                            []byte
	HTTPResponse                    *http.Response
	ApplicationvndOlrapiNoteJSON200 *NoteJson
}

// Status returns HTTPResponse.Status
func (r GetVaultFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVaultFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchVaultFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r PatchVaultFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchVaultFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVaultFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r PostVaultFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVaultFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVaultFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r PutVaultFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVaultFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVaultPathToDirectoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Files *[]string `json:"files,omitempty"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetVaultPathToDirectoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVaultPathToDirectoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// DeleteActiveWithResponse request returning *DeleteActiveResponse
func (c *ClientWithResponses) DeleteActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteActiveResponse, error) {
	rsp, err := c.DeleteActive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteActiveResponse(rsp)
}

// GetActiveWithResponse request returning *GetActiveResponse
func (c *ClientWithResponses) GetActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActiveResponse, error) {
	rsp, err := c.GetActive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActiveResponse(rsp)
}

// PatchActiveWithBodyWithResponse request with arbitrary body returning *PatchActiveResponse
func (c *ClientWithResponses) PatchActiveWithBodyWithResponse(ctx context.Context, params *PatchActiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchActiveResponse, error) {
	rsp, err := c.PatchActiveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchActiveResponse(rsp)
}

func (c *ClientWithResponses) PatchActiveWithResponse(ctx context.Context, params *PatchActiveParams, body PatchActiveJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchActiveResponse, error) {
	rsp, err := c.PatchActive(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchActiveResponse(rsp)
}

// PostActiveWithBodyWithResponse request with arbitrary body returning *PostActiveResponse
func (c *ClientWithResponses) PostActiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostActiveResponse, error) {
	rsp, err := c.PostActiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostActiveResponse(rsp)
}

// PutActiveWithBodyWithResponse request with arbitrary body returning *PutActiveResponse
func (c *ClientWithResponses) PutActiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutActiveResponse, error) {
	rsp, err := c.PutActiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutActiveResponse(rsp)
}

// GetCommandsWithResponse request returning *GetCommandsResponse
func (c *ClientWithResponses) GetCommandsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCommandsResponse, error) {
	rsp, err := c.GetCommands(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommandsResponse(rsp)
}

// PostCommandsCommandIdWithResponse request returning *PostCommandsCommandIdResponse
func (c *ClientWithResponses) PostCommandsCommandIdWithResponse(ctx context.Context, commandId string, reqEditors ...RequestEditorFn) (*PostCommandsCommandIdResponse, error) {
	rsp, err := c.PostCommandsCommandId(ctx, commandId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommandsCommandIdResponse(rsp)
}

// PostOpenFilenameWithResponse request returning *PostOpenFilenameResponse
func (c *ClientWithResponses) PostOpenFilenameWithResponse(ctx context.Context, filename string, params *PostOpenFilenameParams, reqEditors ...RequestEditorFn) (*PostOpenFilenameResponse, error) {
	rsp, err := c.PostOpenFilename(ctx, filename, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOpenFilenameResponse(rsp)
}

// DeletePeriodicPeriodWithResponse request returning *DeletePeriodicPeriodResponse
func (c *ClientWithResponses) DeletePeriodicPeriodWithResponse(ctx context.Context, period DeletePeriodicPeriodParamsPeriod, reqEditors ...RequestEditorFn) (*DeletePeriodicPeriodResponse, error) {
	rsp, err := c.DeletePeriodicPeriod(ctx, period, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePeriodicPeriodResponse(rsp)
}

// GetPeriodicPeriodWithResponse request returning *GetPeriodicPeriodResponse
func (c *ClientWithResponses) GetPeriodicPeriodWithResponse(ctx context.Context, period GetPeriodicPeriodParamsPeriod, reqEditors ...RequestEditorFn) (*GetPeriodicPeriodResponse, error) {
	rsp, err := c.GetPeriodicPeriod(ctx, period, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPeriodicPeriodResponse(rsp)
}

// PatchPeriodicPeriodWithBodyWithResponse request with arbitrary body returning *PatchPeriodicPeriodResponse
func (c *ClientWithResponses) PatchPeriodicPeriodWithBodyWithResponse(ctx context.Context, period PatchPeriodicPeriodParamsPeriod, params *PatchPeriodicPeriodParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPeriodicPeriodResponse, error) {
	rsp, err := c.PatchPeriodicPeriodWithBody(ctx, period, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPeriodicPeriodResponse(rsp)
}

func (c *ClientWithResponses) PatchPeriodicPeriodWithResponse(ctx context.Context, period PatchPeriodicPeriodParamsPeriod, params *PatchPeriodicPeriodParams, body PatchPeriodicPeriodJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPeriodicPeriodResponse, error) {
	rsp, err := c.PatchPeriodicPeriod(ctx, period, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPeriodicPeriodResponse(rsp)
}

// PostPeriodicPeriodWithBodyWithResponse request with arbitrary body returning *PostPeriodicPeriodResponse
func (c *ClientWithResponses) PostPeriodicPeriodWithBodyWithResponse(ctx context.Context, period PostPeriodicPeriodParamsPeriod, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPeriodicPeriodResponse, error) {
	rsp, err := c.PostPeriodicPeriodWithBody(ctx, period, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPeriodicPeriodResponse(rsp)
}

// PutPeriodicPeriodWithBodyWithResponse request with arbitrary body returning *PutPeriodicPeriodResponse
func (c *ClientWithResponses) PutPeriodicPeriodWithBodyWithResponse(ctx context.Context, period PutPeriodicPeriodParamsPeriod, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPeriodicPeriodResponse, error) {
	rsp, err := c.PutPeriodicPeriodWithBody(ctx, period, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPeriodicPeriodResponse(rsp)
}

// PostSearchWithBodyWithResponse request with arbitrary body returning *PostSearchResponse
func (c *ClientWithResponses) PostSearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSearchResponse, error) {
	rsp, err := c.PostSearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchResponse(rsp)
}

func (c *ClientWithResponses) PostSearchWithApplicationVndOlrapiJSONlogicPlusJSONBodyWithResponse(ctx context.Context, body PostSearchApplicationVndOlrapiJSONlogicPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSearchResponse, error) {
	rsp, err := c.PostSearchWithApplicationVndOlrapiJSONlogicPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchResponse(rsp)
}

// PostSearchSimpleWithResponse request returning *PostSearchSimpleResponse
func (c *ClientWithResponses) PostSearchSimpleWithResponse(ctx context.Context, params *PostSearchSimpleParams, reqEditors ...RequestEditorFn) (*PostSearchSimpleResponse, error) {
	rsp, err := c.PostSearchSimple(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchSimpleResponse(rsp)
}

// GetVaultWithResponse request returning *GetVaultResponse
func (c *ClientWithResponses) GetVaultWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVaultResponse, error) {
	rsp, err := c.GetVault(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVaultResponse(rsp)
}

// DeleteVaultFilenameWithResponse request returning *DeleteVaultFilenameResponse
func (c *ClientWithResponses) DeleteVaultFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*DeleteVaultFilenameResponse, error) {
	rsp, err := c.DeleteVaultFilename(ctx, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVaultFilenameResponse(rsp)
}

// GetVaultFilenameWithResponse request returning *GetVaultFilenameResponse
func (c *ClientWithResponses) GetVaultFilenameWithResponse(ctx context.Context, filename string, reqEditors ...RequestEditorFn) (*GetVaultFilenameResponse, error) {
	rsp, err := c.GetVaultFilename(ctx, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVaultFilenameResponse(rsp)
}

// PatchVaultFilenameWithBodyWithResponse request with arbitrary body returning *PatchVaultFilenameResponse
func (c *ClientWithResponses) PatchVaultFilenameWithBodyWithResponse(ctx context.Context, filename string, params *PatchVaultFilenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchVaultFilenameResponse, error) {
	rsp, err := c.PatchVaultFilenameWithBody(ctx, filename, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchVaultFilenameResponse(rsp)
}

func (c *ClientWithResponses) PatchVaultFilenameWithResponse(ctx context.Context, filename string, params *PatchVaultFilenameParams, body PatchVaultFilenameJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchVaultFilenameResponse, error) {
	rsp, err := c.PatchVaultFilename(ctx, filename, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchVaultFilenameResponse(rsp)
}

// PostVaultFilenameWithBodyWithResponse request with arbitrary body returning *PostVaultFilenameResponse
func (c *ClientWithResponses) PostVaultFilenameWithBodyWithResponse(ctx context.Context, filename string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVaultFilenameResponse, error) {
	rsp, err := c.PostVaultFilenameWithBody(ctx, filename, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVaultFilenameResponse(rsp)
}

// PutVaultFilenameWithBodyWithResponse request with arbitrary body returning *PutVaultFilenameResponse
func (c *ClientWithResponses) PutVaultFilenameWithBodyWithResponse(ctx context.Context, filename string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVaultFilenameResponse, error) {
	rsp, err := c.PutVaultFilenameWithBody(ctx, filename, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVaultFilenameResponse(rsp)
}

// GetVaultPathToDirectoryWithResponse request returning *GetVaultPathToDirectoryResponse
func (c *ClientWithResponses) GetVaultPathToDirectoryWithResponse(ctx context.Context, pathToDirectory string, reqEditors ...RequestEditorFn) (*GetVaultPathToDirectoryResponse, error) {
	rsp, err := c.GetVaultPathToDirectory(ctx, pathToDirectory, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVaultPathToDirectoryResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Authenticated Is your current request authenticated?
			Authenticated *bool `json:"authenticated,omitempty"`

			// Ok 'OK'
			Ok *string `json:"ok,omitempty"`

			// Service 'Obsidian Local REST API'
			Service  *string `json:"service,omitempty"`
			Versions *struct {
				// Obsidian Obsidian plugin API version
				Obsidian *string `json:"obsidian,omitempty"`

				// Self Plugin version.
				Self *string `json:"self,omitempty"`
			} `json:"versions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteActiveResponse parses an HTTP response from a DeleteActiveWithResponse call
func ParseDeleteActiveResponse(rsp *http.Response) (*DeleteActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseGetActiveResponse parses an HTTP response from a GetActiveWithResponse call
func ParseGetActiveResponse(rsp *http.Response) (*GetActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOlrapiNoteJSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/markdown) unsupported

	}

	return response, nil
}

// ParsePatchActiveResponse parses an HTTP response from a PatchActiveWithResponse call
func ParsePatchActiveResponse(rsp *http.Response) (*PatchActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePostActiveResponse parses an HTTP response from a PostActiveWithResponse call
func ParsePostActiveResponse(rsp *http.Response) (*PostActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePutActiveResponse parses an HTTP response from a PutActiveWithResponse call
func ParsePutActiveResponse(rsp *http.Response) (*PutActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseGetCommandsResponse parses an HTTP response from a GetCommandsWithResponse call
func ParseGetCommandsResponse(rsp *http.Response) (*GetCommandsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommandsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Commands *[]struct {
				Id   *string `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"commands,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCommandsCommandIdResponse parses an HTTP response from a PostCommandsCommandIdWithResponse call
func ParsePostCommandsCommandIdResponse(rsp *http.Response) (*PostCommandsCommandIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCommandsCommandIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostOpenFilenameResponse parses an HTTP response from a PostOpenFilenameWithResponse call
func ParsePostOpenFilenameResponse(rsp *http.Response) (*PostOpenFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOpenFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePeriodicPeriodResponse parses an HTTP response from a DeletePeriodicPeriodWithResponse call
func ParseDeletePeriodicPeriodResponse(rsp *http.Response) (*DeletePeriodicPeriodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePeriodicPeriodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseGetPeriodicPeriodResponse parses an HTTP response from a GetPeriodicPeriodWithResponse call
func ParseGetPeriodicPeriodResponse(rsp *http.Response) (*GetPeriodicPeriodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPeriodicPeriodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOlrapiNoteJSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/markdown) unsupported

	}

	return response, nil
}

// ParsePatchPeriodicPeriodResponse parses an HTTP response from a PatchPeriodicPeriodWithResponse call
func ParsePatchPeriodicPeriodResponse(rsp *http.Response) (*PatchPeriodicPeriodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPeriodicPeriodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePostPeriodicPeriodResponse parses an HTTP response from a PostPeriodicPeriodWithResponse call
func ParsePostPeriodicPeriodResponse(rsp *http.Response) (*PostPeriodicPeriodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPeriodicPeriodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePutPeriodicPeriodResponse parses an HTTP response from a PutPeriodicPeriodWithResponse call
func ParsePutPeriodicPeriodResponse(rsp *http.Response) (*PutPeriodicPeriodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPeriodicPeriodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePostSearchResponse parses an HTTP response from a PostSearchWithResponse call
func ParsePostSearchResponse(rsp *http.Response) (*PostSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Filename Path to the matching file
			Filename string                `json:"filename"`
			Result   PostSearch_200_Result `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostSearchSimpleResponse parses an HTTP response from a PostSearchSimpleWithResponse call
func ParsePostSearchSimpleResponse(rsp *http.Response) (*PostSearchSimpleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSearchSimpleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Filename Path to the matching file
			Filename *string `json:"filename,omitempty"`
			Matches  *[]struct {
				Context string `json:"context"`
				Match   struct {
					End   float32 `json:"end"`
					Start float32 `json:"start"`
				} `json:"match"`
			} `json:"matches,omitempty"`
			Score *float32 `json:"score,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVaultResponse parses an HTTP response from a GetVaultWithResponse call
func ParseGetVaultResponse(rsp *http.Response) (*GetVaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Files *[]string `json:"files,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteVaultFilenameResponse parses an HTTP response from a DeleteVaultFilenameWithResponse call
func ParseDeleteVaultFilenameResponse(rsp *http.Response) (*DeleteVaultFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVaultFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseGetVaultFilenameResponse parses an HTTP response from a GetVaultFilenameWithResponse call
func ParseGetVaultFilenameResponse(rsp *http.Response) (*GetVaultFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVaultFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteJson
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndOlrapiNoteJSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/markdown) unsupported

	}

	return response, nil
}

// ParsePatchVaultFilenameResponse parses an HTTP response from a PatchVaultFilenameWithResponse call
func ParsePatchVaultFilenameResponse(rsp *http.Response) (*PatchVaultFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchVaultFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePostVaultFilenameResponse parses an HTTP response from a PostVaultFilenameWithResponse call
func ParsePostVaultFilenameResponse(rsp *http.Response) (*PostVaultFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVaultFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParsePutVaultFilenameResponse parses an HTTP response from a PutVaultFilenameWithResponse call
func ParsePutVaultFilenameResponse(rsp *http.Response) (*PutVaultFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVaultFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseGetVaultPathToDirectoryResponse parses an HTTP response from a GetVaultPathToDirectoryWithResponse call
func ParseGetVaultPathToDirectoryResponse(rsp *http.Response) (*GetVaultPathToDirectoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVaultPathToDirectoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Files *[]string `json:"files,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
